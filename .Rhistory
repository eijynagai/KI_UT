require2 <- function(x) {
if (!base::require(x, character.only = TRUE)) {
install.packages(x, dep = TRUE) ;
base::require(x, character.only = TRUE)
}
#library(x)
}
require2("Seurat")
require2("tidyverse")
require2("patchwork")
require2("BiocManager")
BiocManager::install("dittoSeq", update = FALSE)
# mask require, check and download if not installed
require2 <- function(x) {
if (!base::require(x, character.only = TRUE)) {
install.packages(x, dep = TRUE) ;
base::require(x, character.only = TRUE)
}
library(x)
}
require2("Seurat")
# mask require, check and download if not installed
require2 <- function(x) {
if (!base::require(x, character.only = TRUE)) {
install.packages(x, dep = TRUE) ;
base::require(x, character.only = TRUE)
}
do.call("library", x)
}
require2("Seurat")
# mask require, check and download if not installed
require2 <- function(x) {
if (!base::require(x, character.only = TRUE)) {
install.packages(x, dep = TRUE) ;
base::require(x, character.only = TRUE)
}
do.call("library", list(x))
}
require2("Seurat")
require2("tidyverse")
require2("patchwork")
require2("BiocManager")
BiocManager::install("dittoSeq", update = FALSE)
# mask require, check and download if not installed
require2 <- function(x) {
if (!base::require(x, character.only = TRUE)) {
install.packages(x, dep = TRUE) ;
base::require(x, character.only = TRUE)
}
base::library(x, character.only = TRUE)
#do.call("library", list(x))
}
require2("Seurat")
require2("tidyverse")
require2("patchwork")
require2("BiocManager")
BiocManager::install("dittoSeq", update = FALSE)
suppressPackageStartupMessages({
library(Seurat)
library(tidyverse)
#library(reticulate)
library(patchwork)
})
dirname <- "datasets/pbmc3k/filtered_gene_bc_matrices/hg19/"
counts_matrix <- Read10X(data.dir = dirname)
so <- CreateSeuratObject(counts = counts_matrix)
so
library(Seurat)
wilk_file <- readRDS("datasets/wilk_2020/GSM4557335_HIP015_cell.counts.matrices.rds")
#head(wilk)
wilk_matrix <- Read10X(wilk_file)
#wilk_matrix <- Read10X(wilk_file)
wilk_so <- CreateSeuratObject(counts = wilk_file, project = "wilk2020")
wilk_file
knitr::opts_chunk$set(echo = TRUE)
# mask require, check and download if not installed
require2 <- function(x) {
if (!base::require(x, character.only = TRUE)) {
install.packages(x, dep = TRUE) ;
base::require(x, character.only = TRUE)
}
base::library(x, character.only = TRUE)
#do.call("library", list(x))
}
require2("Seurat")
require2("tidyverse")
require2("patchwork")
#require2("BiocManager")
#BiocManager::install("dittoSeq", update = FALSE)
ct_path <- "datasets/nakajima/GSM4292484_filtered_gene_bc_matrices_P10.csv.gz"
ct_matrix <- read.csv(data.dir = ct_path)
ct_path <- "datasets/nakajima/GSM4292484_filtered_gene_bc_matrices_P10.csv.gz"
ct_matrix <- read.csv(data.dir = ct_path)
ct_path <- "datasets/nakajima/GSM4292484_filtered_gene_bc_matrices_P10.csv.gz"
ct_matrix <- read.csv(file = ct_path)
#ct <- CreateSeuratObject(counts = ct_matrix)
#ct
ct_path <- "datasets/nakajima/GSM4292484_filtered_gene_bc_matrices_P10.csv.gz"
ct_matrix <- read.csv(file = ct_path)
ct <- CreateSeuratObject(counts = ct_matrix)
ct
head(ct@meta.data)
ct_path <- "datasets/nakajima/GSM4292484_filtered_gene_bc_matrices_P10.csv.gz"
ct_matrix <- read.csv(file = ct_path, header = TRUE)
ct <- CreateSeuratObject(counts = ct_matrix)
ct
head(ct@meta.data)
ct_path <- "datasets/nakajima/GSM4292484_filtered_gene_bc_matrices_P10.csv.gz"
ct_matrix <- read.csv(file = ct_path, row.names = NULL, header = TRUE)
ct <- CreateSeuratObject(counts = ct_matrix)
ct
head(ct@meta.data)
head(ct_matrix)
ct_path <- "datasets/nakajima/GSM4292484_filtered_gene_bc_matrices_P10.csv.gz"
ct_matrix <- read.csv(file = ct_path, row.names = TRUE, header = TRUE)
ct_path <- "datasets/nakajima/GSM4292484_filtered_gene_bc_matrices_P10.csv.gz"
ct_matrix <- read.csv(file = ct_path, row.names = FALSE, header = TRUE)
ct_path <- "datasets/nakajima/GSM4292484_filtered_gene_bc_matrices_P10.csv.gz"
ct_matrix <- read.csv(file = ct_path, header = FALSE)
ct <- CreateSeuratObject(counts = ct_matrix)
ct
head(ct_matrix)
head(ct_matrix)
ct_matrix <- read.csv(file = ct_path, header = TRUE)
head(ct_matrix)
ct_matrix[[1]]
rownames(ct_matrix) <- ct_matrix[[1]]
ct_matrix[[1]] <- NULL
head(ct_matrix)
head(ct_matrix)
ct <- CreateSeuratObject(counts = ct_matrix)
ct
head(ct@meta.data)
ct_path <- "datasets/nakajima/GSM4292484_filtered_gene_bc_matrices_P10.csv.gz"
ct_matrix <- read.csv(file = ct_path, header = TRUE)
rownames(ct_matrix) <- ct_matrix[[1]]
ct_matrix[[1]] <- NULL
head(ct_matrix)
ct <- CreateSeuratObject(counts = ct_matrix)
ct
head(ct@meta.data)
ct <- CreateSeuratObject(counts = ct_matrix, project = "gbm")
ct
head(ct@meta.data)
# Same thing for the second dataset
tr_path <- "datasets/nakajima/GSM4292485_filtered_gene_bc_matrices_12h.csv.gz"
tr_matrix <- read.csv(file = ct_path, header = TRUE)
rownames(tr_matrix) <- tr_matrix[[1]]
tr_matrix[[1]] <- NULL
tr <- CreateSeuratObject(counts = tr_matrix, project = "gbm")
tr
# function to perform QC and plots
do_plot_QC <- function(so) {
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^MT-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
# Ribosomal reads
rb.genes <- rownames(so)[grep("^RP[SL]",rownames(so))]
percent.ribo <- colSums(C[rb.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.ribo, col.name = "percent.ribo")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
return so
# function to perform QC and plots
do_plot_QC <- function(so) {
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^MT-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
# Ribosomal reads
rb.genes <- rownames(so)[grep("^RP[SL]",rownames(so))]
percent.ribo <- colSums(C[rb.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.ribo, col.name = "percent.ribo")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
return(so)
}
do_plot_QC(tr)
# function to perform QC and plots
do_plot_QC <- function(so) {
library(Matrix)
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^MT-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
# Ribosomal reads
rb.genes <- rownames(so)[grep("^RP[SL]",rownames(so))]
percent.ribo <- colSums(C[rb.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.ribo, col.name = "percent.ribo")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
return(so)
}
do_plot_QC(tr)
# function to perform QC and plots
do_plot_QC <- function(so) {
library(Matrix)
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^MT-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
print("ok")
# Ribosomal reads
rb.genes <- rownames(so)[grep("^RP[SL]",rownames(so))]
percent.ribo <- colSums(C[rb.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.ribo, col.name = "percent.ribo")
print("ok2")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
return(so)
}
do_plot_QC(tr)
# function to perform QC and plots
do_plot_QC <- function(so) {
C<-GetAssayData(object = so, slot = "counts")
library(Matrix)
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^MT-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
print("ok")
# Ribosomal reads
rb.genes <- rownames(so)[grep("^RP[SL]",rownames(so))]
percent.ribo <- colSums(C[rb.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.ribo, col.name = "percent.ribo")
print("ok2")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
return(so)
}
do_plot_QC(tr)
# function to perform QC and plots
do_plot_QC <- function(so) {
C<-GetAssayData(object = so, slot = "counts")
library(Matrix)
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^MT-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
# Ribosomal reads
rb.genes <- rownames(so)[grep("^RP[SL]",rownames(so))]
percent.ribo <- colSums(C[rb.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.ribo, col.name = "percent.ribo")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
p1 <- VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
print(p1)
return(so)
}
do_plot_QC(tr)
# function to perform QC and plots
do_plot_QC <- function(so) {
C<-GetAssayData(object = so, slot = "counts")
library(Matrix)
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^mt-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
p1 <- VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
print(p1)
return(so)
}
do_plot_QC(tr)
# function to perform QC and plots
do_plot_QC <- function(so) {
C<-GetAssayData(object = so, slot = "counts")
library(Matrix)
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^Mt-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
p1 <- VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
print(p1)
return(so)
}
do_plot_QC(tr)
# function to perform QC and plots
do_plot_QC <- function(so) {
C<-GetAssayData(object = so, slot = "counts")
library(Matrix)
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^MT-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
# Ribosomal reads
rb.genes <- rownames(so)[grep("^RP[SL]",rownames(so))]
percent.ribo <- colSums(C[rb.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.ribo, col.name = "percent.ribo")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
p1 <- VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
print(p1)
return(so)
}
do_plot_QC(tr)
# function to perform QC and plots
do_plot_QC <- function(so) {
C<-GetAssayData(object = so, slot = "counts")
library(Matrix)
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^MT-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
# Ribosomal reads
rb.genes <- rownames(so)[grep("^RP[SL]",rownames(so))]
percent.ribo <- colSums(C[rb.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.ribo, col.name = "percent.ribo")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
p1 <- VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
print(p1)
options(repr.plot.width = 12, repr.plot.height = 6)
p2 <- FeatureScatter(so, feature1 = "nCount_RNA", feature2 = "percent.mito")
p3 <- FeatureScatter(so, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(p2, p3))
return(so)
}
do_plot_QC(tr)
# function to perform QC and plots
do_plot_QC <- function(so) {
C<-GetAssayData(object = so, slot = "counts")
library(Matrix)
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^MT-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
# Ribosomal reads
rb.genes <- rownames(so)[grep("^RP[SL]",rownames(so))]
percent.ribo <- colSums(C[rb.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.ribo, col.name = "percent.ribo")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
p1 <- VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
print(p1)
options(repr.plot.width = 12, repr.plot.height = 6)
p2 <- FeatureScatter(so, feature1 = "nCount_RNA", feature2 = "percent.mito")
p3 <- FeatureScatter(so, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
print(CombinePlots(plots = list(p2, p3)))
return(so)
}
do_plot_QC(tr)
# function to perform QC and plots
do_plot_QC <- function(so) {
C<-GetAssayData(object = so, slot = "counts")
library(Matrix)
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^MT-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
# Ribosomal reads
rb.genes <- rownames(so)[grep("^RP[SL]",rownames(so))]
percent.ribo <- colSums(C[rb.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.ribo, col.name = "percent.ribo")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
p1 <- VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
print(p1)
options(repr.plot.width = 12, repr.plot.height = 6)
p2 <- FeatureScatter(so, feature1 = "nCount_RNA", feature2 = "percent.mito")
p3 <- FeatureScatter(so, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
print(p2 + p3)
return(so)
}
do_plot_QC(tr)
head(rownames(so))
# function to perform QC and plots
do_plot_QC <- function(so) {
C<-GetAssayData(object = so, slot = "counts")
print(head(C))
library(Matrix)
# Mitochondrial reads
mt.genes <- rownames(so)[grep("^MT-",rownames(so))]
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.mito, col.name = "percent.mito")
# Ribosomal reads
rb.genes <- rownames(so)[grep("^RP[SL]",rownames(so))]
percent.ribo <- colSums(C[rb.genes,])/Matrix::colSums(C)*100
so <- AddMetaData(so, percent.ribo, col.name = "percent.ribo")
# Plot QC
# Visualize QC metrics as a violin plot
options(repr.plot.width = 10, repr.plot.height = 8)
p1 <- VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mito", "percent.ribo"), ncol = 4, pt.size = 0.1)
print(p1)
options(repr.plot.width = 12, repr.plot.height = 6)
p2 <- FeatureScatter(so, feature1 = "nCount_RNA", feature2 = "percent.mito")
p3 <- FeatureScatter(so, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
print(p2 + p3)
return(so)
}
do_plot_QC(tr)
head(rownames(so))
ct@meta.data
head(ct@raw.data)
head(ct@data)
GetAssayData(object = so, slot = "counts")
so.list <- c(ct, tr)
so.list
so.list <- lapply(X = so.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
so.anchors <- FindIntegrationAnchors(object.list = so.list, dims = 1:20)
```{r}
so.combined <- IntegrateData(anchorset = so.anchors, dims = 1:20)
DefaultAssay(so.combined) <- "integrated"
# Run the standard workflow for visualization and clustering
so.combined <- ScaleData(so.combined, verbose = FALSE)
so.combined <- RunPCA(so.combined, npcs = 30, verbose = FALSE)
# t-SNE and Clustering
so.combined <- RunUMAP(so.combined, reduction = "pca", dims = 1:20)
so.combined <- FindNeighbors(so.combined, reduction = "pca", dims = 1:20)
so.combined <- FindClusters(so.combined, resolution = 0.5)
ct_path <- "datasets/nakajima/GSM4292484_filtered_gene_bc_matrices_P10.csv.gz"
ct_matrix <- read.csv(file = ct_path, header = TRUE)
rownames(ct_matrix) <- ct_matrix[[1]]
ct_matrix[[1]] <- NULL
head(ct_matrix)
ct <- CreateSeuratObject(counts = ct_matrix, project = "gbm")
ct$stim <- "0h"
ct <- CreateSeuratObject(counts = ct_matrix, project = "gbm")
ct$stim <- "0h"
head(ct@meta.data)
# Same thing for the second dataset
tr_path <- "datasets/nakajima/GSM4292485_filtered_gene_bc_matrices_12h.csv.gz"
tr_matrix <- read.csv(file = ct_path, header = TRUE)
rownames(tr_matrix) <- tr_matrix[[1]]
tr_matrix[[1]] <- NULL
tr <- CreateSeuratObject(counts = tr_matrix, project = "gbm")
tr$stim <- "12h"
so.list <- c(ct, tr)
so.list
so.list <- lapply(X = so.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
so.anchors <- FindIntegrationAnchors(object.list = so.list, dims = 1:20)
so.combined <- IntegrateData(anchorset = so.anchors, dims = 1:20)
DefaultAssay(so.combined) <- "integrated"
# Run the standard workflow for visualization and clustering
so.combined <- ScaleData(so.combined, verbose = FALSE)
so.combined <- RunPCA(so.combined, npcs = 30, verbose = FALSE)
# t-SNE and Clustering
so.combined <- RunUMAP(so.combined, reduction = "pca", dims = 1:20)
so.combined <- FindNeighbors(so.combined, reduction = "pca", dims = 1:20)
so.combined <- FindClusters(so.combined, resolution = 0.5)
# Visualization
p1 <- DimPlot(so.combined, reduction = "umap", group.by = "stim")
p2 <- DimPlot(so.combined, reduction = "umap", label = TRUE)
plot_grid(p1, p2)
# Visualization
p1 <- DimPlot(so.combined, reduction = "umap", group.by = "stim")
p2 <- DimPlot(so.combined, reduction = "umap", label = TRUE)
p1 + p2
DimPlot(so.combined, reduction = "umap", split.by = "stim")
DefaultAssay(so.combined) <- "RNA"
c1.markers <- FindConservedMarkers(so.combined, ident.1 = 1, grouping.var = "stim", verbose = FALSE)
# mask require, check and download if not installed
require2 <- function(x) {
if (!base::require(x, character.only = TRUE)) {
install.packages(x, dep = TRUE) ;
base::require(x, character.only = TRUE)
}
base::library(x, character.only = TRUE)
#do.call("library", list(x))
}
require2("Seurat")
require2("tidyverse")
require2("patchwork")
require2("metap")
# mask require, check and download if not installed
require2 <- function(x) {
if (!base::require(x, character.only = TRUE)) {
install.packages(x, dep = TRUE) ;
base::require(x, character.only = TRUE)
}
base::library(x, character.only = TRUE)
#do.call("library", list(x))
}
require2("Seurat")
require2("tidyverse")
require2("patchwork")
install.packages("qqconf")
#require2("metap")
#require2("BiocManager")
#BiocManager::install("dittoSeq", update = FALSE)
DefaultAssay(so.combined) <- "RNA"
c1.markers <- FindConservedMarkers(so.combined, ident.1 = 1, grouping.var = "stim", verbose = FALSE)
DefaultAssay(so.combined) <- "RNA"
c1.markers <- FindConservedMarkers(so.combined, ident.1 = 1, grouping.var = "stim", verbose = FALSE)
DimPlot(so.combined, reduction = "umap", split.by = "stim")
